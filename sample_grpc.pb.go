// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: sample.proto

package pactissue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrokenSampleService_GetSample_FullMethodName = "/pactissue.BrokenSampleService/GetSample"
)

// BrokenSampleServiceClient is the client API for BrokenSampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokenSampleServiceClient interface {
	GetSample(ctx context.Context, in *BrokenSampleRequest, opts ...grpc.CallOption) (*BrokenSampleResponse, error)
}

type brokenSampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokenSampleServiceClient(cc grpc.ClientConnInterface) BrokenSampleServiceClient {
	return &brokenSampleServiceClient{cc}
}

func (c *brokenSampleServiceClient) GetSample(ctx context.Context, in *BrokenSampleRequest, opts ...grpc.CallOption) (*BrokenSampleResponse, error) {
	out := new(BrokenSampleResponse)
	err := c.cc.Invoke(ctx, BrokenSampleService_GetSample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokenSampleServiceServer is the server API for BrokenSampleService service.
// All implementations must embed UnimplementedBrokenSampleServiceServer
// for forward compatibility
type BrokenSampleServiceServer interface {
	GetSample(context.Context, *BrokenSampleRequest) (*BrokenSampleResponse, error)
	mustEmbedUnimplementedBrokenSampleServiceServer()
}

// UnimplementedBrokenSampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrokenSampleServiceServer struct {
}

func (UnimplementedBrokenSampleServiceServer) GetSample(context.Context, *BrokenSampleRequest) (*BrokenSampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSample not implemented")
}
func (UnimplementedBrokenSampleServiceServer) mustEmbedUnimplementedBrokenSampleServiceServer() {}

// UnsafeBrokenSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokenSampleServiceServer will
// result in compilation errors.
type UnsafeBrokenSampleServiceServer interface {
	mustEmbedUnimplementedBrokenSampleServiceServer()
}

func RegisterBrokenSampleServiceServer(s grpc.ServiceRegistrar, srv BrokenSampleServiceServer) {
	s.RegisterService(&BrokenSampleService_ServiceDesc, srv)
}

func _BrokenSampleService_GetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokenSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokenSampleServiceServer).GetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokenSampleService_GetSample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokenSampleServiceServer).GetSample(ctx, req.(*BrokenSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokenSampleService_ServiceDesc is the grpc.ServiceDesc for BrokenSampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokenSampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pactissue.BrokenSampleService",
	HandlerType: (*BrokenSampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSample",
			Handler:    _BrokenSampleService_GetSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}

const (
	WorkingSampleService_GetSample_FullMethodName = "/pactissue.WorkingSampleService/GetSample"
)

// WorkingSampleServiceClient is the client API for WorkingSampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkingSampleServiceClient interface {
	GetSample(ctx context.Context, in *WorkingSampleRequest, opts ...grpc.CallOption) (*WorkingSampleResponse, error)
}

type workingSampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkingSampleServiceClient(cc grpc.ClientConnInterface) WorkingSampleServiceClient {
	return &workingSampleServiceClient{cc}
}

func (c *workingSampleServiceClient) GetSample(ctx context.Context, in *WorkingSampleRequest, opts ...grpc.CallOption) (*WorkingSampleResponse, error) {
	out := new(WorkingSampleResponse)
	err := c.cc.Invoke(ctx, WorkingSampleService_GetSample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkingSampleServiceServer is the server API for WorkingSampleService service.
// All implementations must embed UnimplementedWorkingSampleServiceServer
// for forward compatibility
type WorkingSampleServiceServer interface {
	GetSample(context.Context, *WorkingSampleRequest) (*WorkingSampleResponse, error)
	mustEmbedUnimplementedWorkingSampleServiceServer()
}

// UnimplementedWorkingSampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkingSampleServiceServer struct {
}

func (UnimplementedWorkingSampleServiceServer) GetSample(context.Context, *WorkingSampleRequest) (*WorkingSampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSample not implemented")
}
func (UnimplementedWorkingSampleServiceServer) mustEmbedUnimplementedWorkingSampleServiceServer() {}

// UnsafeWorkingSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkingSampleServiceServer will
// result in compilation errors.
type UnsafeWorkingSampleServiceServer interface {
	mustEmbedUnimplementedWorkingSampleServiceServer()
}

func RegisterWorkingSampleServiceServer(s grpc.ServiceRegistrar, srv WorkingSampleServiceServer) {
	s.RegisterService(&WorkingSampleService_ServiceDesc, srv)
}

func _WorkingSampleService_GetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkingSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingSampleServiceServer).GetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkingSampleService_GetSample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingSampleServiceServer).GetSample(ctx, req.(*WorkingSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkingSampleService_ServiceDesc is the grpc.ServiceDesc for WorkingSampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkingSampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pactissue.WorkingSampleService",
	HandlerType: (*WorkingSampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSample",
			Handler:    _WorkingSampleService_GetSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}
